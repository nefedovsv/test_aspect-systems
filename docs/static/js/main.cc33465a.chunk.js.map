{"version":3,"sources":["interfaces/index.tsx","reducers/validateFunction.ts","reducers/initialState.ts","store/configureStore.tsx","reducers/index.tsx","components/InsidePanelComponent.tsx","components/ButtonComponent.tsx","components/LabelComponent.tsx","components/InsideComponent.tsx","components/PanelComponent.tsx","components/Content.tsx","components/App.tsx","action/index.tsx","index.tsx","components/styles/App.module.css","components/styles/Content.module.css"],"names":["ElementType","SEND_USER","parserObject","value","test","numbers","match","map","item","Number","type","props","width","height","visible","caption","split","slice","initialState","user","value1","value2","content","panel","label","button","store","createStore","state","action","change_property","payload","newValue","newElement","push","nuberElement","charAt","validate","applyMiddleware","logger","InsidePanelComponent","this","data","style","border","margin","React","ButtonComponent","className","styles","box","LabelComponent","InsideComponent","index","key","filter","Boolean","PanelComponent","Content","list","App","onChange","e","setState","currentTarget","name","onSubmit","preventDefault","sendUser","input","addonBefore","placeholder","defaultValue","htmlType","onClick","connect","dispatch","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cc33465a.chunk.js","sourcesContent":["export const SEND_USER = \"SEND_USER\";\r\nexport interface SendUserAction {\r\n  type: typeof SEND_USER;\r\n  payload: { value1: string; value2: string };\r\n}\r\n// Интерфейсы для контента\r\nexport enum ElementType {\r\n  panel = \"panel\",\r\n  label = \"label\",\r\n  button = \"button\"\r\n}\r\nexport interface IProperty {\r\n  width?: number;\r\n  height?: number;\r\n  caption?: string;\r\n  visible: boolean;\r\n}\r\nexport interface IElement {\r\n  type: ElementType;\r\n  props: IProperty;\r\n  content?: IElement[];\r\n}\r\nexport interface IStore {\r\n  content: Array<IElement>;\r\n  user: { value1: string; value2: string };\r\n}\r\n","export const parserObject = function(value: string) {\r\n  if (/panel/gm.test(value) && /true/gm.test(value)) {\r\n    let numbers = value.match(/\\d+/g);\r\n    if (numbers) {\r\n      numbers.map(item => Number(item));\r\n      return {\r\n        type: \"panel\",\r\n        props: {\r\n          width: numbers[0],\r\n          height: numbers[1],\r\n          visible: true\r\n        }\r\n      };\r\n    }\r\n  } else if (/label/gm.test(value) && /true/gm.test(value)) {\r\n    const text = value\r\n      .split(\":\")[3]\r\n      .split(\",\")[0]\r\n      .slice(1, -1);\r\n    return {\r\n      type: \"label\",\r\n      props: {\r\n        caption: text,\r\n        visible: true\r\n      }\r\n    };\r\n  } else if (/button/gm.test(value) && /true/gm.test(value)) {\r\n    let numbers = value.match(/\\d+/g);\r\n    if (numbers) {\r\n      return {\r\n        type: \"button\",\r\n        props: {\r\n          width: Number(numbers[0]),\r\n          height: Number(numbers[1]),\r\n          visible: true\r\n        }\r\n      };\r\n    }\r\n  }\r\n};\r\n","import { IStore, ElementType } from \"../interfaces/index\";\r\n\r\nexport const initialState: IStore = {\r\n  user: { value1: \"\", value2: \"\" },\r\n  content: [\r\n    {\r\n      type: ElementType.panel,\r\n      props: {\r\n        width: 800,\r\n        height: 600,\r\n        visible: true\r\n      },\r\n      content: []\r\n    },\r\n    {\r\n      type: ElementType.label,\r\n      props: {\r\n        caption: \"Aspect Ryazan\",\r\n        visible: true\r\n      }\r\n    },\r\n    {\r\n      type: ElementType.button,\r\n      props: {\r\n        width: 120,\r\n        height: 35,\r\n        visible: true\r\n      }\r\n    }\r\n  ]\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"../reducers\";\r\nimport logger from \"redux-logger\";\r\nexport const store = createStore(rootReducer, applyMiddleware(logger));\r\n","import { IStore, SendUserAction, SEND_USER } from \"../interfaces/index\";\r\nimport { parserObject } from \"./validateFunction\";\r\nimport { initialState } from \"./initialState\";\r\n\r\nexport function rootReducer(\r\n  state = initialState,\r\n  action: SendUserAction\r\n): IStore {\r\n  switch (action.type) {\r\n    case SEND_USER:\r\n      const change_property = action.payload.value1;\r\n      const newValue = action.payload.value2;\r\n\r\n      const validate = function(\r\n        change_property: string,\r\n        newValue: string\r\n      ): void {\r\n        if (\r\n          /^[0-9]+$/gm.test(newValue) === true &&\r\n          /width$/gm.test(change_property)\r\n        ) {\r\n          const nuberElement = Number(change_property.charAt(8));\r\n          state.content[nuberElement].props.width = Number(newValue);\r\n        } else if (\r\n          /^[0-9]+$/gm.test(newValue) === true &&\r\n          /height$/gm.test(change_property)\r\n        ) {\r\n          const nuberElement = Number(change_property.charAt(8));\r\n          state.content[nuberElement].props.height = Number(newValue);\r\n        } else if (\r\n          /^true|false$/gm.test(newValue) === true &&\r\n          /visible$/gm.test(change_property) === true\r\n        ) {\r\n          if (newValue.charAt(0) === \"t\") {\r\n            const nuberElement = Number(change_property.charAt(8));\r\n            state.content[nuberElement].props.visible = true;\r\n          } else {\r\n            const nuberElement = Number(change_property.charAt(8));\r\n            state.content[nuberElement].props.visible = false;\r\n          }\r\n        } else if (/caption$/gm.test(change_property)) {\r\n          const nuberElement = Number(change_property.charAt(8));\r\n          state.content[nuberElement].props.caption = newValue;\r\n        }\r\n      };\r\n\r\n      if (/visible/gm.test(newValue)) {\r\n        const newElement: any = parserObject(newValue);\r\n        if (state.content[0].content) {\r\n          state.content[0].content.push(newElement);\r\n        }\r\n      } else {\r\n        validate(change_property, newValue);\r\n      }\r\n      return {\r\n        user: action.payload,\r\n        content: [...state.content]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { IElement } from \"../interfaces/index\";\r\nexport interface IInsidePanelComponent {\r\n  data: IElement;\r\n}\r\nexport class InsidePanelComponent extends React.Component<\r\n  IInsidePanelComponent\r\n> {\r\n  render() {\r\n    const { props } = this.props.data;\r\n    return (\r\n      <div\r\n        style={{\r\n          width: `${props.width}px`,\r\n          height: `${props.height}px`,\r\n          border: \"10px outset #3d77b8\",\r\n          margin: \"auto\"\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { IElement } from \"../interfaces/index\";\r\nimport styles from \"./styles/Content.module.css\";\r\nexport interface IButtonComponent {\r\n  data: IElement;\r\n}\r\nexport class ButtonComponent extends React.Component<IButtonComponent> {\r\n  render() {\r\n    const { props } = this.props.data;\r\n    return (\r\n      <Button\r\n        className={styles.box}\r\n        type=\"primary\"\r\n        style={{\r\n          width: `${props.width}px`,\r\n          height: `${props.height}px`\r\n        }}\r\n      >\r\n        Кнопка\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { IElement } from \"../interfaces/index\";\r\nimport styles from \"./styles/Content.module.css\";\r\nexport interface ILabelComponent {\r\n  data: IElement;\r\n}\r\nexport class LabelComponent extends React.Component<ILabelComponent> {\r\n  render() {\r\n    const { props } = this.props.data;\r\n    return <span className={styles.box}>{props.caption}</span>;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { IElement } from \"../interfaces/index\";\r\nimport { InsidePanelComponent } from \"./InsidePanelComponent\";\r\nimport { ButtonComponent } from \"./ButtonComponent\";\r\nimport { LabelComponent } from \"./LabelComponent\";\r\nexport interface IInsideComponent {\r\n  content?: IElement[];\r\n}\r\nexport class InsideComponent extends React.Component<IInsideComponent> {\r\n  render() {\r\n    const { content } = this.props;\r\n    if (content) {\r\n      const component: React.ReactNode[] = content.map((item, index) => {\r\n        if (item.type === \"panel\" && item.props.visible) {\r\n          return <InsidePanelComponent key={index} data={item} />;\r\n        } else if (item.type === \"button\" && item.props.visible) {\r\n          return <ButtonComponent key={index} data={item} />;\r\n        } else if (item.type === \"label\" && item.props.visible) {\r\n          return <LabelComponent key={index} data={item} />;\r\n        }\r\n        return null;\r\n      });\r\n      return component.filter(Boolean);\r\n    }\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { IElement } from \"../interfaces/index\";\r\nimport { InsideComponent } from \"./InsideComponent\";\r\nexport interface IPanelComponent {\r\n  data: IElement;\r\n}\r\nexport class PanelComponent extends React.Component<IPanelComponent> {\r\n  render() {\r\n    const { props } = this.props.data;\r\n    return (\r\n      <div\r\n        style={{\r\n          width: `${props.width}px`,\r\n          height: `${props.height}px`,\r\n          border: \"10px outset #3d77b8\",\r\n          margin: \"auto\"\r\n        }}\r\n      >\r\n        <InsideComponent content={this.props.data.content} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { IElement } from \"../interfaces/index\";\r\nimport { PanelComponent } from \"./PanelComponent\";\r\nimport { ButtonComponent } from \"./ButtonComponent\";\r\nimport { LabelComponent } from \"./LabelComponent\";\r\nexport interface IContent {\r\n  list: IElement[];\r\n}\r\nexport class Content extends React.Component<IContent> {\r\n  render() {\r\n    const { list } = this.props;\r\n    const component: React.ReactNode[] = list.map((item, index) => {\r\n      if (item.type === \"panel\" && item.props.visible) {\r\n        return <PanelComponent key={index} data={item} />;\r\n      } else if (item.type === \"button\" && item.props.visible) {\r\n        return <ButtonComponent key={index} data={item} />;\r\n      } else if (item.type === \"label\" && item.props.visible) {\r\n        return <LabelComponent key={index} data={item} />;\r\n      }\r\n      return null;\r\n    });\r\n    return component.filter(Boolean);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Input, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { sendUser } from \"../action/index\";\r\nimport { IElement, IStore } from \"../interfaces/index\";\r\nimport { Content } from \"./Content\";\r\nimport styles from \"./styles/App.module.css\";\r\nexport interface IStateModalProps {\r\n  content: IElement[];\r\n}\r\nexport interface IStateDispatchProps {\r\n  sendUser: (value1: string, value2: string) => void;\r\n}\r\nexport type IApp = IStateModalProps & IStateDispatchProps;\r\ninterface IState {\r\n  [key: string]: string;\r\n}\r\nclass App extends React.Component<IApp, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      change_property: \"\",\r\n      value: \"\"\r\n    };\r\n  }\r\n  render() {\r\n    const { change_property } = this.state;\r\n    const { value } = this.state;\r\n    return (\r\n      <div className={styles.box}>\r\n        <div className={styles.panel}>\r\n          <Input\r\n            className={styles.input}\r\n            addonBefore={\"Путь\"}\r\n            placeholder=\"content[0].props.width\"\r\n            defaultValue={\"dsfdsf\"}\r\n            value={change_property}\r\n            name=\"change_property\"\r\n            onChange={this.onChange}\r\n          />\r\n          <Input\r\n            className={styles.input}\r\n            addonBefore={\"Новое значение\"}\r\n            placeholder=\"число, true/false, текст, объект\"\r\n            value={value}\r\n            name=\"value\"\r\n            onChange={this.onChange}\r\n          />\r\n          <Button type=\"primary\" htmlType=\"submit\" onClick={this.onSubmit}>\r\n            Изменить\r\n          </Button>\r\n        </div>\r\n        <div className={styles.content}>\r\n          <Content list={this.props.content} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n  };\r\n  onSubmit = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    const { sendUser } = this.props;\r\n    sendUser(this.state.change_property, this.state.value);\r\n  };\r\n}\r\nconst mapStateToProps = (store: IStore): IStateModalProps => ({\r\n  content: store.content\r\n});\r\nconst mapDispatchToProps = (dispatch: Dispatch): IStateDispatchProps => ({\r\n  sendUser: (value1: string, value2: string) =>\r\n    dispatch(sendUser(value1, value2))\r\n});\r\nexport default connect<IStateModalProps, IStateDispatchProps, {}, IStore>(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { SEND_USER, SendUserAction } from \"../interfaces/index\";\r\nexport function sendUser(value1: string, value2: string): SendUserAction {\r\n  return {\r\n    type: SEND_USER,\r\n    payload: { value1, value2 }\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { store } from \"./store/configureStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./Antd.css\";\r\nimport App from \"./components/App\";\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"App_box__2eAif\",\"panel\":\"App_panel__1hdWB\",\"input\":\"App_input__z5j4y\",\"content\":\"App_content__2yeIS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Content_box__RuzQx\"};"],"sourceRoot":""}